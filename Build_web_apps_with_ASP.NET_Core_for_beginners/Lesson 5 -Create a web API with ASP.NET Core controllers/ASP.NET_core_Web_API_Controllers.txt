The base class: ControllerBase

    A controller is a public class with one or more public methods known as actions. By convention, a controller is placed in the project root's controller directory. The
    actions are exposed as HTTP endpoints via rounting, So an HTTP 'get'  request to 'https://localhost:{PORT}/weatherforecast' cause the Get() method of the
    'weatherForecastControll' class to be executed

    This first thing to notice is that this class inherits from the 'controllerBase' base class. This base class provides much standard funtional for handling HTTP request,
    so you can focus on the specific bysiness logic for your application

API controller class attribute
    Two important attributes are applied to 'WeatherForecastController', as show in the following code:

    '
        [ApiController]
        [Route("[controller]")]
        public class WeatherForecastController : ControllerBase
    '

    '[ApiController]' enables opinionated behaviors that make it easier to build web APIs. Some behaviors include parameter source inference, attribute routing as a 
    requirement, and model validation erro-handlingenhancements*.

    '[Route]' defines the routing pattern '[controller]'. The controller's name (case-insnsitive, withou the controller suffix) replaces the '[controller]' token. This 
    controller handle request to 'https://localhost:{PORT}/weatherforecast'

provides weather results with the 'Get()' method
   'WeatherForecastControll' includes a single controller action, designated by '[HttpGet(Name = "GetWeatherForecast")]' attribute. This attribute routess HTTP 'GET' request
    to the 'public IEnumerabel<WeatherForecast> Get()' method. s you saw in the previous exercise, requests to 'https://localhost:{PORT}/weatherforecast' caused the weather
    results to be returned.

    As you learn later in this module, other common actions are associated with a web API that performs CRUD operations ('GET','POST','PUT','PATCH','DELETE'). But a API 
    controller needs to implement only one controller action.

    In this case, you're getting the full list of 'WeatherForecast' items retnr. The 'GET' operations also allow for retriving a single item by passing in an identifier. In 
    ASP.NET, you can retive a single item by using the '[HttpGet("{id}")]' attribute.