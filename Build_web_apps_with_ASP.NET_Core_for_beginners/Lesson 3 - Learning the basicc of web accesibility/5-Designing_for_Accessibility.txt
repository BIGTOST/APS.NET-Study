Accessibility is a relatively large topic. We can't cover it completely in a single Learn Module. However, there are some
core tenets that you'll want to implement in every page you create. Designing an accessible page from te start is always easier
than going back to an existing page to make it accessible.

Use HTML the way it was designed
    HTML provides many elements that you can use to create a page, including buttons, links, and form controls. Each of those elements
    has a set of built-in functionality, like being clickable, being linkable, or accepting focus.

    With CSS and JavaScript, it's possible to make any elements look like any type of control. For exemple, you can use '<span>'
    to create a '<button>' element, and '<b>' can became '<a>'. Although this capability provides some shortcuts for styling or laying out
    you page, it removes the built-in funtionality. Tools like a screen reader won't be able to understand that '<span>' is being used as '<a>'.
    Someone browsing with a keyboard won't be able to set focus on a '<div>' element that has been programmed to simulate a '<button>' element.

    Another HTML element that's often skipped is headers ('<h1>' through '<h2>'). From a visual standpoint, headers tgas start from largest to smallers
    text siz. This convention leads to many developers to forgo headers elements and instead stylize '<div>' or other generic elements.

    Unfortunately, stylized generic elements convey only visual information rather than structural. Users of screen readers rely heavily on heading to find
    information and browse through a page. Writing desciptive heading content and using semantic tags are important for creating an easily navigable site for
    users of screen readers

    As a best practice, you should, alwais use the appropriate HTML when creating controls on page. If you want a hyperlink, use '<a>', or use '<button>' for
    a button.

Use good visual cues
    Developers often think about screen readers as only accessibility. However, users might use numerous other tools, or they might not
    use tools at all. Users who are using the browser will rely on certain visual cus to understand how to interact with your page.

    One of the great features of CSS is that it provides complete control over how to display a page, including removing certain display elements. For exemple,
    you can reomve the outline from a text box or remove the underline from a hyperlink. Unfortunately, removing thoose types of cues can make it more challenging
    for someone who depends on them to recognize the type of control.

Consider the keyboard
    Some user can't use mouse or trackpad/touchpad. Instead, these users rely on keyboard interaction to tab from one element to the next. It's important for your pages
    to present your content in logical order so a keyboard user can access each interactive element as they move down.

    When a user moves through a page by tabbing, focus one control to the next based on the order in which the controls are listed in HTML soucer. The controls for your page
    should be listed in the HTML source in the order in which you expect the page to be browsed, while relying on CSS to lay out the page visually to users.

    For example, imagine creating a form with two columns. You'll want to consider what the natural flow is for someone filling out the form, and then list
    the controls in that order. Then you can use CSS to create the columns and display the controls in their appropriate locations.

    Keyboard navigaton relies heavily on semantic HTML. Certain controls (like buttons) accept focus, whereas 'div' elements don't. If you're re-creating controls that already 
    exist in HTML, you're making it more difficult for someone to use your page with a keyboard.

    Important

        Keyboard navigation needs to be tested manually, and you should do it on every page that you create. WebAIM has more information about keyboard navigation strategies.
        -> https://webaim.org/techniques/keyboard/












