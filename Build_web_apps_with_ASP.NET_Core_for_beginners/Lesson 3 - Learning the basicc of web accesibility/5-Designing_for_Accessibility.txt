Accessibility is a relatively large topic. We can't cover it completely in a single Learn Module. However, there are some
core tenets that you'll want to implement in every page you create. Designing an accessible page from te start is always easier
than going back to an existing page to make it accessible.

Use HTML the way it was designed
    HTML provides many elements that you can use to create a page, including buttons, links, and form controls. Each of those elements
    has a set of built-in functionality, like being clickable, being linkable, or accepting focus.

    With CSS and JavaScript, it's possible to make any elements look like any type of control. For exemple, you can use '<span>'
    to create a '<button>' element, and '<b>' can became '<a>'. Although this capability provides some shortcuts for styling or laying out
    you page, it removes the built-in funtionality. Tools like a screen reader won't be able to understand that '<span>' is being used as '<a>'.
    Someone browsing with a keyboard won't be able to set focus on a '<div>' element that has been programmed to simulate a '<button>' element.

    Another HTML element that's often skipped is headers ('<h1>' through '<h2>'). From a visual standpoint, headers tgas start from largest to smallers
    text siz. This convention leads to many developers to forgo headers elements and instead stylize '<div>' or other generic elements.

    Unfortunately, stylized generic elements convey only visual information rather than structural. Users of screen readers rely heavily on heading to find
    information and browse through a page. Writing desciptive heading content and using semantic tags are important for creating an easily navigable site for
    users of screen readers

    As a best practice, you should, alwais use the appropriate HTML when creating controls on page. If you want a hyperlink, use '<a>', or use '<button>' for
    a button.

Use good visual cues